import{isConnected as r,requestAccess as s,signTransaction as e,signAuthEntry as t,signMessage as n,getNetwork as a}from"@stellar/freighter-api";import{ModuleType as h}from"../types.js";import{parseError as i}from"../utils.js";const o="freighter";class c{constructor(){this.moduleType=h.HOT_WALLET,this.productId=o,this.productName="Freighter",this.productUrl="https://freighter.app",this.productIcon="https://stellar.creit.tech/wallet-icons/freighter.png"}async runChecks(){if(!await this.isAvailable())throw new Error("Freighter is not connected")}async isAvailable(){return r().then((({isConnected:r,error:s})=>!s&&r)).catch((()=>!1))}async getAddress(){return this.runChecks().then((()=>s())).then((({address:r,error:s})=>{if(s)throw s;return{address:r}})).catch((r=>{throw i(r)}))}async signTransaction(r,s){return this.runChecks().then((async()=>{const{signedTxXdr:t,signerAddress:n,error:a}=await e(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(a)throw a;return{signedTxXdr:t,signerAddress:n}})).catch((r=>{throw i(r)}))}async signAuthEntry(r,s){return this.runChecks().then((async()=>{const{signedAuthEntry:e,signerAddress:n,error:a}=await t(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(a||!e)throw a;return{signedAuthEntry:e.toString("base64"),signerAddress:n}})).catch((r=>{throw i(r)}))}async signMessage(r,s){return this.runChecks().then((async()=>{const{signedMessage:e,signerAddress:t,error:a}=await n(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(a||!e)throw a;return{signedMessage:e.toString("base64"),signerAddress:t}})).catch((r=>{throw i(r)}))}async getNetwork(){return this.runChecks().then((async()=>{const{network:r,networkPassphrase:s,error:e}=await a();if(e)throw e;return{network:r,networkPassphrase:s}})).catch((r=>{throw i(r)}))}}export{o as FREIGHTER_ID,c as FreighterModule};
//# sourceMappingURL=freighter.module.js.map
