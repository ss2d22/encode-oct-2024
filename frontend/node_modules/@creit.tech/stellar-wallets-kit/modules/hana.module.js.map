{"version":3,"file":"hana.module.js","sources":["../../src/modules/hana.module.ts"],"sourcesContent":["import { ModuleInterface, ModuleType } from '../types';\nimport { parseError } from '../utils';\n\ninterface SignTransactionProps {\n  xdr: string;\n  accountToSign?: string;\n  networkPassphrase?: string;\n}\n\ninterface SignBlobProps {\n  blob: string;\n  accountToSign: string;\n}\n\ninterface SignAuthEntryProps {\n  xdr: string;\n  accountToSign?: string;\n}\n\ndeclare const window: Window & {\n  hanaWallet?: {\n    stellar?: {\n      getPublicKey(): Promise<string>;\n      signTransaction({ xdr, accountToSign, networkPassphrase }: SignTransactionProps): Promise<string>;\n      signBlob({ blob, accountToSign }: SignBlobProps): Promise<string>;\n      signAuthEntry({ xdr, accountToSign }: SignAuthEntryProps): Promise<string>;\n    };\n  };\n};\n\nexport const HANA_ID = 'hana';\n\nexport class HanaModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = HANA_ID;\n  productName: string = 'Hana Wallet';\n  productUrl: string = 'https://hanawallet.io/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/hana.png';\n\n  async isAvailable(): Promise<boolean> {\n    return !!window.hanaWallet?.stellar;\n  }\n\n  async getAddress(): Promise<{ address: string }> {\n    const runChecks = async () => {\n      if (!window.hanaWallet?.stellar) {\n        throw new Error('Hana Wallet is not installed');\n      }\n    };\n\n    return runChecks()\n      .then(() => window.hanaWallet!.stellar!.getPublicKey())\n      .then(address => ({ address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    const runChecks = async () => {\n      if (!window.hanaWallet?.stellar) {\n        throw new Error('Hana Wallet is not installed');\n      }\n    };\n\n    const sign = async () =>\n      window.hanaWallet!.stellar!.signTransaction({\n        xdr,\n        accountToSign: opts?.address,\n        networkPassphrase: opts?.networkPassphrase,\n      });\n\n    return runChecks()\n      .then(sign)\n      .then(signedTxXdr => ({ signedTxXdr, signerAddress: opts?.address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signAuthEntry(\n    authEntry: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n    }\n  ): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    const runChecks = async () => {\n      if (!window.hanaWallet?.stellar) {\n        throw new Error('Hana Wallet is not installed');\n      }\n    };\n\n    const sign = async () =>\n      window.hanaWallet!.stellar!.signAuthEntry({\n        xdr: authEntry,\n        accountToSign: opts?.address,\n      });\n\n    return runChecks()\n      .then(sign)\n      .then(signedAuthEntry => ({ signedAuthEntry, signerAddress: opts?.address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signMessage(): Promise<{ signedMessage: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Hana does not support the \"signMessage\" function',\n    };\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    throw {\n      code: -3,\n      message: 'Hana does not support the \"getNetwork\" function',\n    };\n  }\n}\n"],"names":["HANA_ID","HanaModule","constructor","this","moduleType","ModuleType","HOT_WALLET","productId","productName","productUrl","productIcon","isAvailable","window","hanaWallet","stellar","getAddress","async","Error","runChecks","then","getPublicKey","address","catch","e","parseError","signTransaction","xdr","opts","accountToSign","networkPassphrase","signedTxXdr","signerAddress","signAuthEntry","authEntry","signedAuthEntry","signMessage","code","message","getNetwork"],"mappings":"kFA8BO,MAAMA,EAAU,OAEhB,MAAMC,EAAN,WAAAC,GACLC,KAAAC,WAAyBC,EAAWC,WAEhBH,KAAAI,UAAAP,EACEG,KAAAK,YAAA,cACDL,KAAAM,WAAA,yBACCN,KAAAO,YAAA,kDAAA,CAEtB,iBAAMC,GACG,QAAEC,OAAOC,YAAYC,OAC9B,CAEA,gBAAMC,GAOJ,MANkBC,WACZ,IAACJ,OAAOC,YAAYC,QAChB,MAAA,IAAIG,MAAM,+BAClB,EAGKC,GACJC,MAAK,IAAMP,OAAOC,WAAYC,QAASM,iBACvCD,MAAiBE,IAAA,CAAEA,cACnBC,OAAWC,IACV,MAAMC,EAAWD,EAAC,GAExB,CAEA,qBAAME,CACJC,EACAC,GAqBA,MAbkBX,WACZ,IAACJ,OAAOC,YAAYC,QAChB,MAAA,IAAIG,MAAM,+BAClB,EAUKC,GACJC,MARUH,SACXJ,OAAOC,WAAYC,QAASW,gBAAgB,CAC1CC,MACAE,cAAeD,GAAMN,QACrBQ,kBAAmBF,GAAME,sBAK1BV,MAAKW,IAAgB,CAAEA,cAAaC,cAAeJ,GAAMN,YACzDC,OAAWC,IACV,MAAMC,EAAWD,EAAC,GAExB,CAEA,mBAAMS,CACJC,EACAN,GAkBA,MAZkBX,WACZ,IAACJ,OAAOC,YAAYC,QAChB,MAAA,IAAIG,MAAM,+BAClB,EASKC,GACJC,MAPUH,SACXJ,OAAOC,WAAYC,QAASkB,cAAc,CACxCN,IAAKO,EACLL,cAAeD,GAAMN,YAKtBF,MAAKe,IAAoB,CAAEA,kBAAiBH,cAAeJ,GAAMN,YACjEC,OAAWC,IACV,MAAMC,EAAWD,EAAC,GAExB,CAEA,iBAAMY,GACE,KAAA,CACJC,MAAM,EACNC,QAAS,mDAEb,CAEA,gBAAMC,GACE,KAAA,CACJF,MAAM,EACNC,QAAS,kDAEb"}