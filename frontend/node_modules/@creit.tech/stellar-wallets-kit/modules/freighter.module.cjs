"use strict";var r=require("@stellar/freighter-api"),s=require("../types.cjs"),e=require("../utils.cjs");const t="freighter";exports.FREIGHTER_ID=t,exports.FreighterModule=class{constructor(){this.moduleType=s.ModuleType.HOT_WALLET,this.productId=t,this.productName="Freighter",this.productUrl="https://freighter.app",this.productIcon="https://stellar.creit.tech/wallet-icons/freighter.png"}async runChecks(){if(!await this.isAvailable())throw new Error("Freighter is not connected")}async isAvailable(){return r.isConnected().then((({isConnected:r,error:s})=>!s&&r)).catch((()=>!1))}async getAddress(){return this.runChecks().then((()=>r.requestAccess())).then((({address:r,error:s})=>{if(s)throw s;return{address:r}})).catch((r=>{throw e.parseError(r)}))}async signTransaction(s,t){return this.runChecks().then((async()=>{const{signedTxXdr:e,signerAddress:n,error:a}=await r.signTransaction(s,{address:t?.address,networkPassphrase:t?.networkPassphrase});if(a)throw a;return{signedTxXdr:e,signerAddress:n}})).catch((r=>{throw e.parseError(r)}))}async signAuthEntry(s,t){return this.runChecks().then((async()=>{const{signedAuthEntry:e,signerAddress:n,error:a}=await r.signAuthEntry(s,{address:t?.address,networkPassphrase:t?.networkPassphrase});if(a||!e)throw a;return{signedAuthEntry:e.toString("base64"),signerAddress:n}})).catch((r=>{throw e.parseError(r)}))}async signMessage(s,t){return this.runChecks().then((async()=>{const{signedMessage:e,signerAddress:n,error:a}=await r.signMessage(s,{address:t?.address,networkPassphrase:t?.networkPassphrase});if(a||!e)throw a;return{signedMessage:e.toString("base64"),signerAddress:n}})).catch((r=>{throw e.parseError(r)}))}async getNetwork(){return this.runChecks().then((async()=>{const{network:s,networkPassphrase:e,error:t}=await r.getNetwork();if(t)throw t;return{network:s,networkPassphrase:e}})).catch((r=>{throw e.parseError(r)}))}};
//# sourceMappingURL=freighter.module.cjs.map
