import{ModuleType as t}from"../types.js";import{parseError as a}from"../utils.js";const s="hana";class n{constructor(){this.moduleType=t.HOT_WALLET,this.productId=s,this.productName="Hana Wallet",this.productUrl="https://hanawallet.io/",this.productIcon="https://stellar.creit.tech/wallet-icons/hana.png"}async isAvailable(){return!!window.hanaWallet?.stellar}async getAddress(){return(async()=>{if(!window.hanaWallet?.stellar)throw new Error("Hana Wallet is not installed")})().then((()=>window.hanaWallet.stellar.getPublicKey())).then((t=>({address:t}))).catch((t=>{throw a(t)}))}async signTransaction(t,s){return(async()=>{if(!window.hanaWallet?.stellar)throw new Error("Hana Wallet is not installed")})().then((async()=>window.hanaWallet.stellar.signTransaction({xdr:t,accountToSign:s?.address,networkPassphrase:s?.networkPassphrase}))).then((t=>({signedTxXdr:t,signerAddress:s?.address}))).catch((t=>{throw a(t)}))}async signAuthEntry(t,s){return(async()=>{if(!window.hanaWallet?.stellar)throw new Error("Hana Wallet is not installed")})().then((async()=>window.hanaWallet.stellar.signAuthEntry({xdr:t,accountToSign:s?.address}))).then((t=>({signedAuthEntry:t,signerAddress:s?.address}))).catch((t=>{throw a(t)}))}async signMessage(){throw{code:-3,message:'Hana does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Hana does not support the "getNetwork" function'}}}export{s as HANA_ID,n as HanaModule};
//# sourceMappingURL=hana.module.js.map
