{"version":3,"file":"store.cjs","sources":["../../src/state/store.ts"],"sourcesContent":["import { createStore, select, setProp, withProps } from '@ngneat/elf';\nimport { Observable } from 'rxjs';\nimport { ISupportedWallet, IModalTheme, WalletNetwork, IButtonTheme } from '../types';\n\nexport interface StateProps {\n  allowedWallets: ISupportedWallet[];\n\n  horizonUrl?: string;\n\n  selectedNetwork?: WalletNetwork;\n  selectedModuleId?: string;\n\n  modalTheme?: IModalTheme;\n  buttonTheme?: IButtonTheme;\n\n  activeAddress?: string;\n}\n\nexport const store = createStore(\n  { name: 'state' },\n  withProps<StateProps>({\n    allowedWallets: [],\n  })\n);\n\nexport const allowedWallets$: Observable<ISupportedWallet[]> = store.pipe(\n  select((state: StateProps) => state.allowedWallets)\n);\n\nexport const modalTheme$: Observable<IModalTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.modalTheme)\n);\n\nexport const buttonTheme$: Observable<IButtonTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.buttonTheme)\n);\n\nexport const activeAddress$: Observable<string | undefined> = store.pipe(\n  select((state: StateProps) => state.activeAddress)\n);\n\nexport const horizonUrl$: Observable<string | undefined> = store.pipe(select((state: StateProps) => state.horizonUrl));\n\nexport function setSelectedModuleId(moduleId: Required<StateProps['selectedModuleId']>): void {\n  store.update(setProp('selectedModuleId', moduleId));\n}\n\nexport function setNetwork(network: WalletNetwork): void {\n  if (!Object.values(WalletNetwork).includes(network)) {\n    throw new Error(`Wallet network \"${network}\" is not supported`);\n  }\n\n  store.update(setProp('selectedNetwork', network));\n}\n\nexport function setModalTheme(theme: IModalTheme): void {\n  store.update(setProp('modalTheme', theme));\n}\n\nexport function seButtonTheme(theme: IButtonTheme): void {\n  store.update(setProp('buttonTheme', theme));\n}\n\nexport function setAllowedWallets(data: ISupportedWallet[]) {\n  store.update(setProp('allowedWallets', data));\n}\n\nexport function setAddress(address: string): void {\n  store.update(setProp('activeAddress', address));\n}\n\nexport function removeAddress(): void {\n  store.update(setProp('activeAddress', undefined));\n}\n\nexport function setHorizonUrl(url: string): void {\n  store.update(setProp('horizonUrl', url));\n}\n"],"names":["store","createStore","name","withProps","allowedWallets","allowedWallets$","pipe","select","state","modalTheme$","modalTheme","buttonTheme$","buttonTheme","activeAddress$","activeAddress","horizonUrl$","horizonUrl","update","setProp","theme","address","data","url","network","Object","values","WalletNetwork","includes","Error","moduleId"],"mappings":"oEAkBO,MAAMA,EAAQC,EAAAA,YACnB,CAAEC,KAAM,SACRC,YAAsB,CACpBC,eAAgB,MAIPC,EAAkDL,EAAMM,KACnEC,EAAAA,QAAQC,GAAsBA,EAAMJ,kBAGzBK,EAAmDT,EAAMM,KACpEC,EAAAA,QAAQC,GAAsBA,EAAME,cAGzBC,EAAqDX,EAAMM,KACtEC,EAAAA,QAAQC,GAAsBA,EAAMI,eAGzBC,EAAiDb,EAAMM,KAClEC,EAAAA,QAAQC,GAAsBA,EAAMM,iBAGzBC,EAA8Cf,EAAMM,KAAKC,EAAAA,QAAQC,GAAsBA,EAAMQ,0JA8BnG,WACLhB,EAAMiB,OAAOC,EAAAA,QAAQ,qBAAiB,GACxC,wBAdO,SAAuBC,GAC5BnB,EAAMiB,OAAOC,EAAAA,QAAQ,cAAeC,GACtC,qBAMO,SAAoBC,GACzBpB,EAAMiB,OAAOC,EAAAA,QAAQ,gBAAiBE,GACxC,4BANO,SAA2BC,GAChCrB,EAAMiB,OAAOC,EAAAA,QAAQ,iBAAkBG,GACzC,wBAUO,SAAuBC,GAC5BtB,EAAMiB,OAAOC,EAAAA,QAAQ,aAAcI,GACrC,wBAtBO,SAAuBH,GAC5BnB,EAAMiB,OAAOC,EAAAA,QAAQ,aAAcC,GACrC,qBAVO,SAAoBI,GACzB,IAAKC,OAAOC,OAAOC,EAAaA,eAAEC,SAASJ,GACzC,MAAM,IAAIK,MAAM,mBAAmBL,uBAGrCvB,EAAMiB,OAAOC,EAAAA,QAAQ,kBAAmBK,GAC1C,8BAVO,SAA6BM,GAClC7B,EAAMiB,OAAOC,EAAAA,QAAQ,mBAAoBW,GAC3C"}