{"version":3,"file":"store.js","sources":["../../src/state/store.ts"],"sourcesContent":["import { createStore, select, setProp, withProps } from '@ngneat/elf';\nimport { Observable } from 'rxjs';\nimport { ISupportedWallet, IModalTheme, WalletNetwork, IButtonTheme } from '../types';\n\nexport interface StateProps {\n  allowedWallets: ISupportedWallet[];\n\n  horizonUrl?: string;\n\n  selectedNetwork?: WalletNetwork;\n  selectedModuleId?: string;\n\n  modalTheme?: IModalTheme;\n  buttonTheme?: IButtonTheme;\n\n  activeAddress?: string;\n}\n\nexport const store = createStore(\n  { name: 'state' },\n  withProps<StateProps>({\n    allowedWallets: [],\n  })\n);\n\nexport const allowedWallets$: Observable<ISupportedWallet[]> = store.pipe(\n  select((state: StateProps) => state.allowedWallets)\n);\n\nexport const modalTheme$: Observable<IModalTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.modalTheme)\n);\n\nexport const buttonTheme$: Observable<IButtonTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.buttonTheme)\n);\n\nexport const activeAddress$: Observable<string | undefined> = store.pipe(\n  select((state: StateProps) => state.activeAddress)\n);\n\nexport const horizonUrl$: Observable<string | undefined> = store.pipe(select((state: StateProps) => state.horizonUrl));\n\nexport function setSelectedModuleId(moduleId: Required<StateProps['selectedModuleId']>): void {\n  store.update(setProp('selectedModuleId', moduleId));\n}\n\nexport function setNetwork(network: WalletNetwork): void {\n  if (!Object.values(WalletNetwork).includes(network)) {\n    throw new Error(`Wallet network \"${network}\" is not supported`);\n  }\n\n  store.update(setProp('selectedNetwork', network));\n}\n\nexport function setModalTheme(theme: IModalTheme): void {\n  store.update(setProp('modalTheme', theme));\n}\n\nexport function seButtonTheme(theme: IButtonTheme): void {\n  store.update(setProp('buttonTheme', theme));\n}\n\nexport function setAllowedWallets(data: ISupportedWallet[]) {\n  store.update(setProp('allowedWallets', data));\n}\n\nexport function setAddress(address: string): void {\n  store.update(setProp('activeAddress', address));\n}\n\nexport function removeAddress(): void {\n  store.update(setProp('activeAddress', undefined));\n}\n\nexport function setHorizonUrl(url: string): void {\n  store.update(setProp('horizonUrl', url));\n}\n"],"names":["store","createStore","name","withProps","allowedWallets","allowedWallets$","pipe","select","state","modalTheme$","modalTheme","buttonTheme$","buttonTheme","activeAddress$","activeAddress","horizonUrl$","horizonUrl","setSelectedModuleId","moduleId","update","setProp","setNetwork","network","Object","values","WalletNetwork","includes","Error","setModalTheme","theme","seButtonTheme","setAllowedWallets","data","setAddress","address","removeAddress","setHorizonUrl","url"],"mappings":"8HAkBO,MAAMA,EAAQC,EACnB,CAAEC,KAAM,SACRC,EAAsB,CACpBC,eAAgB,MAIPC,EAAkDL,EAAMM,KACnEC,GAAQC,GAAsBA,EAAMJ,kBAGzBK,EAAmDT,EAAMM,KACpEC,GAAQC,GAAsBA,EAAME,cAGzBC,EAAqDX,EAAMM,KACtEC,GAAQC,GAAsBA,EAAMI,eAGzBC,EAAiDb,EAAMM,KAClEC,GAAQC,GAAsBA,EAAMM,iBAGzBC,EAA8Cf,EAAMM,KAAKC,GAAQC,GAAsBA,EAAMQ,cAEnG,SAASC,EAAoBC,GAClClB,EAAMmB,OAAOC,EAAQ,mBAAoBF,GAC3C,CAEO,SAASG,EAAWC,GACzB,IAAKC,OAAOC,OAAOC,GAAeC,SAASJ,GACzC,MAAM,IAAIK,MAAM,mBAAmBL,uBAGrCtB,EAAMmB,OAAOC,EAAQ,kBAAmBE,GAC1C,CAEO,SAASM,EAAcC,GAC5B7B,EAAMmB,OAAOC,EAAQ,aAAcS,GACrC,CAEO,SAASC,EAAcD,GAC5B7B,EAAMmB,OAAOC,EAAQ,cAAeS,GACtC,CAEO,SAASE,EAAkBC,GAChChC,EAAMmB,OAAOC,EAAQ,iBAAkBY,GACzC,CAEO,SAASC,EAAWC,GACzBlC,EAAMmB,OAAOC,EAAQ,gBAAiBc,GACxC,CAEO,SAASC,IACdnC,EAAMmB,OAAOC,EAAQ,qBAAiB,GACxC,CAEO,SAASgB,EAAcC,GAC5BrC,EAAMmB,OAAOC,EAAQ,aAAciB,GACrC"}